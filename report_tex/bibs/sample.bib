@misc{freedomtorun,
    author = {Stallman, Richard},
    title = {Why programs must not limit the freedom to run them},
    organization = {Free Software Federation},
    url = {https://www.gnu.org/philosophy/programs-must-not-limit-freedom-to-run.en.html},
    year = {2022},
    month = {9},
    addendum = {(accessed Jan. 25, 2023)}
}
@inproceedings{lustreverification,
  author={Hagen, George and Tinelli, Cesare},
  booktitle={2008 Formal Methods in Computer-Aided Design}, 
  title={Scaling Up the Formal Verification of Lustre Programs with SMT-Based Techniques}, 
  year={2008},
  volume={},
  number={},
  pages={1-9},
  doi={10.1109/FMCAD.2008.ECP.19},
  url={https://kind.cs.uiowa.edu/papers/HT+08.pdf}
}
@article{lustre,
author = {Halbwachs, Nicolas and Caspi, Paul and Raymond, Pascal and Pilaud, Daniel},
year = {1991},
month = {10},
pages = {1305 - 1320},
title = {The synchronous data flow programming language {LUSTRE}},
volume = {79},
journal = {Proceedings of the IEEE},
doi = {10.1109/5.97300}
}

@phdthesis{liu2019design,
  title={Design and optimization of behavioral dataflows},
  author={Liu, Shuangnan},
  year={2019},
  publisher={Hong Kong Polytechnic University},
  url={https://theses.lib.polyu.edu.hk/handle/200/10177}
}
@article{secondopinion,
  author={Gajski and Padua and Kuck and Kuhn},
  journal={Computer}, 
  title={A Second Opinion on Data Flow Machines and Languages}, 
  year={1982},
  volume={15},
  number={2},
  pages={58-69},
  doi={10.1109/MC.1982.1653942}
}
@ARTICLE{8299595,
  author={},
  journal={IEEE Std 1800-2017 (Revision of IEEE Std 1800-2012)}, 
  title={IEEE Standard for SystemVerilog--Unified Hardware Design, Specification, and Verification Language}, 
  year={2018},
  volume={},
  number={},
  pages={1-1315},
  doi={10.1109/IEEESTD.2018.8299595}
}
@INPROCEEDINGS{7577380,
  author={Kapre, Nachiket and Bayliss, Samuel},
  booktitle={2016 26th International Conference on Field Programmable Logic and Applications (FPL)}, 
  title={Survey of domain-specific languages for FPGA computing}, 
  year={2016},
  volume={},
  number={},
  pages={1-12},
  doi={10.1109/FPL.2016.7577380}
}
@article{formal_verif,
author = {Herklotz, Yann and Pollard, James D. and Ramanathan, Nadesh and Wickerson, John},
title = {Formal Verification of High-Level Synthesis},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
url = {https://doi.org/10.1145/3485494},
doi = {10.1145/3485494},
abstract = {High-level synthesis (HLS), which refers to the automatic compilation of software into hardware, is rapidly gaining popularity. In a world increasingly reliant on application-specific hardware accelerators, HLS promises hardware designs of comparable performance and energy efficiency to those coded by hand in a hardware description language such as Verilog, while maintaining the convenience and the rich ecosystem of software development. However, current HLS tools cannot always guarantee that the hardware designs they produce are equivalent to the software they were given, thus undermining any reasoning conducted at the software level. Furthermore, there is mounting evidence that existing HLS tools are quite unreliable, sometimes generating wrong hardware or crashing when given valid inputs. To address this problem, we present the first HLS tool that is mechanically verified to preserve the behaviour of its input software. Our tool, called Vericert, extends the CompCert verified C compiler with a new hardware-oriented intermediate language and a Verilog back end, and has been proven correct in Coq. Vericert supports most C constructs, including all integer operations, function calls, local arrays, structs, unions, and general control-flow statements. An evaluation on the PolyBench/C benchmark suite indicates that Vericert generates hardware that is around an order of magnitude slower (only around 2\texttimes{} slower in the absence of division) and about the same size as hardware generated by an existing, optimising (but unverified) HLS tool.},
journal = {Proc. ACM Program. Lang.},
month = {10},
articleno = {117},
numpages = {30},
keywords = {high-level synthesis, CompCert, C, Coq, Verilog}
}
@article{CACCIAGRANO2020100020,
title = {IRON: Reliable domain specific language for programming IoT devices},
journal = {Internet of Things},
volume = {9},
pages = {100020},
year = {2020},
issn = {2542-6605},
doi = {https://doi.org/10.1016/j.iot.2018.09.006},
url = {https://www.sciencedirect.com/science/article/pii/S2542660518300623},
author = {D.R. Cacciagrano and R. Culmone},
keywords = {Domain-specific languages, IoT, Formal specification, ECA rules},
abstract = {A domain-specific language (DSL) is a programming language that is specialized to a particular application domain. IRON is a DSL for the IoT domain which allows not only to program in an easy way using the Event-Condition-Action (ECA) rules but also to prevent incorrect actions. In this paper, we formally describe the semantics of IRON. The anomalies that IRON prevents are: (i) the presence of cycles that determine the non-termination, (ii) the ambiguous actions that do not allow the definition of a final configuration, (iii) the breaking of invariances. In addition to the formal description of IRON, an interpreter was created in a host language (LUA) that captures and manages the three anomalies. This provides a general scheme for the implementation of languages based on ECA rules.}
}
@misc{vivado,
  title = {{AMD} Vivado High Level Design},
  organization={Advanced Micro Devices, Inc.},
  year={2023},
  url={https://www.xilinx.com/products/design-tools/vivado/high-level-design.html}
}
@misc{terasic,
  title = {Terasic - {MAX} 10 - {DE10}-{Lite} {Board}},
  organization={Terasic Inc.},
  url={https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&No=1021}
}
@misc{quartus,
  title={{FPGA} {Design} {Software} - {Intel®} {Quartus} {Prime}},
  organization={Intel Corporation},
  url={https://www.intel.co.uk/content/www/uk/en/products/details/fpga/development-tools/quartus-prime.html}
}
@misc{xdsl-home,
    author = {Bauer, Emilien and Bisbas, George and Brown, Nick and Degioanni, Theo and Van Delm, Josse and Fehr, Mathieu and Gorman, Gerard and Grosser, Tobias and Kelly, Paul and Lopoukhine, Sasha and Luporini, Fabio},
    organization = {xDSL Project},
    url = {https://xdsl.dev},
    addendum = {(accessed Jan. 25, 2023)}
}
@misc{spatialtut,
    author = {Koeplinger, David and Feldman, Matthew and Prabhakar, Raghu and Zhang, Yaqi and Hadjis, Stefan and Fiszel, Ruben and Zhao, Tian and Nardi, Luigi and Pedram, Ardavan and Kozyrakis, Christos and Olukotun, Kunle},
    organization = {Stanford Univ.},
    url = {https://spatial-lang.org/dotprod},
    title={{Inner} {Product} - {Spatial}}
}
@inproceedings{mlir,
  author={Lattner, Chris and Amini, Mehdi and Bondhugula, Uday and Cohen, Albert and Davis, Andy and Pienaar, Jacques and Riddle, River and Shpeisman, Tatiana and Vasilache, Nicolas and Zinenko, Oleksandr},
  booktitle={2021 {{IEEE/ACM}} International Symposium on Code Generation and Optimization (CGO)},
  title={{{MLIR}}: Scaling Compiler Infrastructure for Domain-Specific Computation},
  year={2021},
  volume={},
  number={},
  pages={2-14},
  doi={10.1109/CGO51591.2021.9370308}
}
@inproceedings{5474060,
  author={Villarreal, Jason and Park, Adrian and Najjar, Walid and Halstead,
Robert},
  booktitle={2010 18th IEEE Annual International Symposium on Field-Programmable
Custom Computing Machines},
  title={Designing Modular Hardware Accelerators in {{C}} with {{ROCCC}} 2.0},
  year={2010},
  volume={},
  number={},
  pages={127-134},
  doi={10.1109/FCCM.2010.28}
}
@article{920828,
  author={Rinker, R. and Carter, M. and Patel, A. and Chawathe, M. and Ross, C. and Hammes, J. and Najjar, W.A. and Bohm, W.},
  journal={IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
  title={An automated process for compiling dataflow graphs into reconfigurable hardware},
  year={2001},
  volume={9},
  number={1},
  pages={130-139},
  doi={10.1109/92.920828}
}
@inproceedings{najjar1998cameron,
  title={The cameron project: High-level programming of image processing applications on reconfigurable computing machines},
  author={Najjar, W and Draper, B and Bohm, W and Beveridge, R},
  booktitle={PACT Workshop on Reconfigurable Computing},
  school = {Colorado State Univ.},
  month={10},
  url={https://www.cs.colostate.edu/cameron/Publications/najjar_pact98.pdf},
  year={1998}
}

@phdthesis{sa-c,
  author    = {given=Sven, given-i={SB}, family=Scholz},
  title     = {Single assignment {C:} Design and implementation of a functional {C} variant with special support for shape-invariant array operations},
  school    = {Christian-Albrecht Univ. of Kiel},
  year      = {1997},
  isbn      = {3-8265-3138-8},
  timestamp = {Sat, 17 Jul 2021 09:07:34 +0200},
  language  = {(in German)}
}
@article{spatial,
  author = {Koeplinger, David and Feldman, Matthew and Prabhakar, Raghu and Zhang, Yaqi and Hadjis, Stefan and Fiszel, Ruben and Zhao, Tian and Nardi, Luigi and Pedram, Ardavan and Kozyrakis, Christos and Olukotun, Kunle},
  title = {Spatial: A Language and Compiler for Application Accelerators},
  year = {2018},
  issue_date = {April 2018},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {53},
  number = {4},
  issn = {0362-1340},
  doi = {10.1145/3296979.3192379},
  journal = {SIGPLAN Not.},
  month = {6},
  pages = {296–311},
  numpages = {16}
}
@misc{circt,
  title = {CIRCT},
  organization = {LLVM},
  url = {https://circt.llvm.org},
  addendum = {(accessed Jan. 26, 2023)}
}
@misc{maxj,
  title = {{{MaxJ}}},
  organization = {Maxeler}
}
